/**
 * TrueVibe Service Worker
 * Handles caching, offline functionality, and performance optimization
 */

// Import Workbox
import { precacheAndRoute } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { NetworkFirst, CacheFirst, StaleWhileRevalidate } from 'workbox-strategies';
import { ExpirationPlugin } from 'workbox-expiration';
import { CacheableResponsePlugin } from 'workbox-cacheable-response';

// Use with injectManifest
self.__WB_MANIFEST;

// Precache all assets generated by Vite
precacheAndRoute(self.__WB_MANIFEST);

// Cache the Supabase API responses with Network First strategy
registerRoute(
  ({ url }) => url.origin === 'https://gfzuisdpkdshzqxoissu.supabase.co',
  new NetworkFirst({
    cacheName: 'supabase-api-cache',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new ExpirationPlugin({
        maxEntries: 50,
        maxAgeSeconds: 30 * 24 * 60 * 60, // 30 days
      }),
    ],
  })
);

// Cache static assets with Cache First strategy
registerRoute(
  ({ request }) => request.destination === 'image' || 
                   request.destination === 'font' ||
                   request.destination === 'style',
  new CacheFirst({
    cacheName: 'static-assets-cache',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new ExpirationPlugin({
        maxEntries: 60,
        maxAgeSeconds: 30 * 24 * 60 * 60, // 30 days
      }),
    ],
  })
);

// Cache other assets with Stale While Revalidate strategy
registerRoute(
  ({ request }) => request.destination === 'script' ||
                   request.destination === 'document',
  new StaleWhileRevalidate({
    cacheName: 'dynamic-assets-cache',
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new ExpirationPlugin({
        maxEntries: 30,
        maxAgeSeconds: 7 * 24 * 60 * 60, // 7 days
      }),
    ],
  })
);

// Handle offline fallback
self.addEventListener('fetch', (event) => {
  if (event.request.mode === 'navigate') {
    event.respondWith(
      fetch(event.request).catch(() => {
        return caches.match(new URL('offline.html', import.meta.url).href);
      })
    );
  }
});

// Skip waiting and claim clients to update service worker immediately
self.skipWaiting();
self.clients.claim();
